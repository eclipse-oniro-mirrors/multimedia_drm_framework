import("//build/config/components/idl_tool/idl.gni")

idl_gen_interface("drm_service_idl_interface") {
  sources = [
    "IDrmListener.idl",
    "IMediaDecryptModuleService.idl",
    "IMediaKeySessionService.idl",
    "IMediaKeySystemFactoryService.idl",
    "IMediaKeySystemService.idl",
  ]
  sources_callback = [
    "IMediaKeySessionServiceCallback.idl",
    "IMediaKeySystemServiceCallback.idl",
  ]
  sources_common = [ "DrmTypes.idl" ]

  #client_enable = true

  hitrace = "HITRACE_TAG_ABILITY_MANAGER"

  log_domainid = "0xD002B21"
  log_tag = "drm_service"

  subsystem_name = "multimedia"
  part_name = "drm_framework"
}

config("drm_sa_idl_config") {
  include_dirs = [
    "src",
    "${target_gen_dir}",
  ]
}

ohos_source_set("idl_sa_proxy") {
  output_values = get_target_outputs(":drm_service_idl_interface")
  sources = filter_include(output_values,
                           [
                             "*_service_proxy.cpp",
                             "*_listener_stub.cpp",
                             "*_types.cpp",
                             "*_callback_stub.cpp",
                           ])

  public_configs = [ ":drm_sa_idl_config" ]

  deps = [ ":drm_service_idl_interface" ]

  cflags = [
    "-Wall",
    "-fPIC",
    "-fdata-sections",
    "-ffunction-sections",
    "-fno-asynchronous-unwind-tables",
    "-fno-unwind-tables",
    "-Os",
  ]
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_single",
  ]

  part_name = "drm_framework"
  subsystem_name = "multimedia"
}

ohos_source_set("idl_sa_stub") {
  output_values = get_target_outputs(":drm_service_idl_interface")
  sources = filter_include(output_values,
                           [
                             "*_service_stub.cpp",
                             "*_listener_proxy.cpp",
                             "*_types.cpp",
                             "*_callback_proxy.cpp",
                           ])

  public_configs = [ ":drm_sa_idl_config" ]

  deps = [ ":drm_service_idl_interface" ]

  cflags = [
    "-Wall",
    "-fPIC",
    "-fdata-sections",
    "-ffunction-sections",
    "-fno-asynchronous-unwind-tables",
    "-fno-unwind-tables",
    "-Os",
  ]
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    cfi_vcall_icall_only = true
    debug = false
  }

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_single",
  ]

  part_name = "drm_framework"
  subsystem_name = "multimedia"
}
